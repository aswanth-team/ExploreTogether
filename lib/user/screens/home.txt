import 'package:flutter/material.dart';
import 'post_details_screen.dart';
import 'users_profile_screen.dart';
import 'users.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  late List<Map<String, dynamic>> posts;

  List<Map<String, dynamic>> _generatePostFeed(
      List<Map<String, dynamic>> users) {
    List<Map<String, dynamic>> allPosts = [];
    for (var user in users) {
      for (var post in user["userPosts"]) {
        allPosts.add({
          "postId": post["postId"],
          "images": post["locationImages"],
          "location": post["tripLocation"],
          "locationDescription": post["tripLocationDescription"],
          "tripDuration": post["tripDuration"],
          "userImage": user["userImage"],
          "userName": user["userName"],
        });
      }
    }

    // Shuffle posts to ensure posts from the same user are not consecutive
    allPosts.shuffle();
    return _interleavePostsByUser(allPosts);
  }

  List<Map<String, dynamic>> _interleavePostsByUser(
      List<Map<String, dynamic>> posts) {
    Map<String, List<Map<String, dynamic>>> userPosts = {};
    for (var post in posts) {
      userPosts.putIfAbsent(post['userName'], () => []).add(post);
    }

    List<Map<String, dynamic>> result = [];
    while (userPosts.isNotEmpty) {
      for (var user in userPosts.keys.toList()) {
        if (userPosts[user]!.isNotEmpty) {
          result.add(userPosts[user]!.removeAt(0));
        }
        if (userPosts[user]!.isEmpty) {
          userPosts.remove(user);
        }
      }
    }
    return result;
  }

  String filterLocation = '';
  String filterDuration = '';
  List<Map<String, dynamic>> filteredPosts = [];
  bool isFilterVisible = false;

  // Create a TextEditingController for the search bar
  TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    posts = _generatePostFeed(users);
    filteredPosts = posts;
  }

  void applyFilters() {
    setState(() {
      filteredPosts = posts.where((post) {
        bool matchesLocation = filterLocation.isEmpty ||
            post['location']
                .toLowerCase()
                .contains(filterLocation.toLowerCase());
        bool matchesDuration = filterDuration.isEmpty ||
            post['tripDuration']
                .toLowerCase()
                .contains(filterDuration.toLowerCase());
        return matchesLocation && matchesDuration;
      }).toList();
    });
  }

  void resetFilters() {
    setState(() {
      filterLocation = '';
      filterDuration = '';
      filteredPosts = posts;
    });
  }

  void toggleFilterPopup() {
    setState(() {
      isFilterVisible = !isFilterVisible;
    });
  }

  void onSearchChanged(String query) {
    setState(() {
      filterLocation = query;
      if (query.isEmpty) {
        filteredPosts = posts;
      } else {
        filteredPosts = posts.where((post) {
          return post['location'].toLowerCase().contains(query.toLowerCase());
        }).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Explore'),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: SizedBox(
              width: 200,
              child: TextField(
                controller: _searchController, // Set the controller here
                onChanged: onSearchChanged,
                decoration: InputDecoration(
                  hintText: 'Search by location',
                  border: OutlineInputBorder(),
                  contentPadding: EdgeInsets.symmetric(
                      vertical: 6.0, horizontal: 10.0), // Adjust the padding
                  suffixIcon: IconButton(
                    icon: Icon(Icons.clear),
                    onPressed: () {
                      setState(() {
                        filterLocation = '';
                        filteredPosts = posts;
                        _searchController.clear(); // Clear the search text
                      });
                    },
                  ),
                ),
              ),
            ),
          ),
          IconButton(
            icon: Icon(Icons.filter_alt),
            onPressed: toggleFilterPopup,
          ),
        ],
      ),
      body: Column(
        children: [
          if (isFilterVisible)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15)),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      TextField(
                        onChanged: (value) {
                          setState(() {
                            filterLocation = value;
                          });
                        },
                        decoration: InputDecoration(
                          labelText: 'Location',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(height: 10),
                      TextField(
                        onChanged: (value) {
                          setState(() {
                            filterDuration = value;
                          });
                        },
                        decoration: InputDecoration(
                          labelText: 'Duration',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(height: 20),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          TextButton(
                            onPressed: () {
                              resetFilters();
                              toggleFilterPopup();
                            },
                            child: Text('Reset',
                                style: TextStyle(color: Colors.red)),
                          ),
                          TextButton(
                            onPressed: () {
                              applyFilters();
                              toggleFilterPopup();
                            },
                            child: Text('Apply',
                                style: TextStyle(color: Colors.blue)),
                          ),
                        ],
                      ),
                      TextButton(
                        onPressed: toggleFilterPopup,
                        child: Text('Close',
                            style: TextStyle(color: Colors.black)),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          Expanded(
            child: ListView.builder(
              itemCount: filteredPosts.length,
              itemBuilder: (context, index) {
                final post = filteredPosts[index];
                return UserPost(
                  index: index,
                  postId: post['postId'], // Pass postId here
                  images: post['images'],
                  location: post['location'],
                  locationDescription: post['locationDescription'],
                  tripDuration: post['tripDuration'].toString(),
                  userImage: post['userImage'],
                  userName: post['userName'],
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class UserPost extends StatefulWidget {
  final int index;
  final String postId; // Add postId here
  final List<String> images;
  final String location;
  final String locationDescription;
  final String tripDuration;
  final String userImage;
  final String userName;

  UserPost({
    required this.index,
    required this.postId, // Accept postId in the constructor
    required this.images,
    required this.location,
    required this.locationDescription,
    required this.tripDuration,
    required this.userImage,
    required this.userName,
  });

  @override
  _UserPostState createState() => _UserPostState();
}

class _UserPostState extends State<UserPost> {
  late PageController _pageController;
  late int _currentPage;

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _currentPage = 0;
  }

  void _nextImage() {
    if (_currentPage < widget.images.length - 1) {
      _pageController.animateToPage(
        _currentPage + 1,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    }
  }

  void _previousImage() {
    if (_currentPage > 0) {
      _pageController.animateToPage(
        _currentPage - 1,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to the post details screen when the card is tapped
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PostDetailScreen(
              postId: widget.postId, // Pass postId
              username: widget.userName, // Pass userName
            ),
          ),
        );
      },
      child: Card(
        elevation: 5,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            children: [
              Row(
                children: [
                  GestureDetector(
                    onTap: () {
                      // Navigating to the ProfilePage with the username parameter
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => UsersProfilePage(
                              username: widget.userName), // Passing username
                        ),
                      );
                    },
                    child: CircleAvatar(
                      radius: 25,
                      backgroundImage: AssetImage(widget.userImage),
                    ),
                  ),
                  SizedBox(width: 10),
                  GestureDetector(
                    onTap: () {
                      // Navigating to the ProfilePage with the username parameter
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => UsersProfilePage(
                              username: widget.userName), // Passing username
                        ),
                      );
                    },
                    child: Text(
                      widget.userName,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 10),
              GestureDetector(
                onTap: _nextImage,
                child: Container(
                  height: 250,
                  child: Stack(
                    children: [
                      PageView.builder(
                        controller: _pageController,
                        itemCount: widget.images.length,
                        onPageChanged: (int page) {
                          setState(() {
                            _currentPage = page;
                          });
                        },
                        itemBuilder: (context, index) {
                          return ClipRRect(
                            borderRadius: BorderRadius.circular(15),
                            child: Image.asset(
                              widget.images[index],
                              fit: BoxFit.cover,
                              width: double.infinity,
                            ),
                          );
                        },
                      ),
                      Positioned(
                        left: 10,
                        top: 100,
                        child: IconButton(
                          icon: Icon(Icons.arrow_back_ios, color: Colors.white),
                          onPressed: _previousImage,
                        ),
                      ),
                      Positioned(
                        right: 10,
                        top: 100,
                        child: IconButton(
                          icon: Icon(Icons.arrow_forward_ios,
                              color: Colors.white),
                          onPressed: _nextImage,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  widget.location,
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  widget.locationDescription,
                  style: TextStyle(color: Colors.grey),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  'Duration Plan : ${widget.tripDuration}',
                  style: TextStyle(color: Colors.grey),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}





set the upload and cancel button in the bottom of the pop up and set the post and stroy is not a button set is like a upload section in instagram, and if the user sleected post and sent and upload and type data and press upload then it call a fuction postUpload. in that function  that must be save the entered data and image location path on a json file . and the image must be save on the assets folder .
set a validation that all field in post is uploaded and entered and in the trip duration that only can contain the number and in visiting place ther only enter words(contain numebrs) that seperated by' , ' eg [kannur , nuchiyad, vayathur].  and only 5 or less image can uplaod in file upload if user try to upload more than 5 then show a erro messge , thats conditions is statis filed then enable the upload button.


in the loation text input there add a suggustions of all indian place names base of the letters entering.


and in story section also add validation that only 5 image can upload at a time .


in now there is a problem that wwhen i try to enter the data in the tetx filedd the keybord is pop up at that situation there Showing bottom overflowed by Some pixels , so enable y- overflow on that to prevent that situation


give full fixed modifed code



import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'post_details_screen.dart';
import 'users_profile_screen.dart';
import 'users.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  late List<Map<String, dynamic>> posts;

  List<Map<String, dynamic>> _generatePostFeed(
      List<Map<String, dynamic>> users) {
    List<Map<String, dynamic>> allPosts = [];
    for (var user in users) {
      for (var post in user["userPosts"]) {
        allPosts.add({
          "postId": post["postId"],
          "images": post["locationImages"],
          "location": post["tripLocation"],
          "locationDescription": post["tripLocationDescription"],
          "tripDuration": post["tripDuration"],
          "userImage": user["userImage"],
          "userName": user["userName"],
        });
      }
    }

    // Shuffle posts to ensure posts from the same user are not consecutive
    allPosts.shuffle();
    return _interleavePostsByUser(allPosts);
  }

  List<Map<String, dynamic>> _interleavePostsByUser(
      List<Map<String, dynamic>> posts) {
    Map<String, List<Map<String, dynamic>>> userPosts = {};
    for (var post in posts) {
      userPosts.putIfAbsent(post['userName'], () => []).add(post);
    }

    List<Map<String, dynamic>> result = [];
    while (userPosts.isNotEmpty) {
      for (var user in userPosts.keys.toList()) {
        if (userPosts[user]!.isNotEmpty) {
          result.add(userPosts[user]!.removeAt(0));
        }
        if (userPosts[user]!.isEmpty) {
          userPosts.remove(user);
        }
      }
    }
    return result;
  }

  String filterLocation = '';
  String filterDuration = '';
  List<Map<String, dynamic>> filteredPosts = [];
  bool isFilterVisible = false;
  bool isUploadPopupVisible = false;
  bool isTripImagePopupVisible = false;
  bool isPostSelected = false;
  bool isTripImageSelected = false;

  // Create a TextEditingController for the search bar
  TextEditingController _searchController = TextEditingController();
  TextEditingController visitingPlacesController = TextEditingController();

  @override
  void initState() {
    super.initState();
    posts = _generatePostFeed(users);
    filteredPosts = posts;
  }

  void applyFilters() {
    setState(() {
      filteredPosts = posts.where((post) {
        bool matchesLocation = filterLocation.isEmpty ||
            post['location']
                .toLowerCase()
                .contains(filterLocation.toLowerCase());
        bool matchesDuration = filterDuration.isEmpty ||
            post['tripDuration']
                .toLowerCase()
                .contains(filterDuration.toLowerCase());
        return matchesLocation && matchesDuration;
      }).toList();
    });
  }

  void resetFilters() {
    setState(() {
      filterLocation = '';
      filterDuration = '';
      filteredPosts = posts;
    });
  }

  void toggleFilterPopup() {
    setState(() {
      isFilterVisible = !isFilterVisible;
    });
  }

  void onSearchChanged(String query) {
    setState(() {
      filterLocation = query;
      if (query.isEmpty) {
        filteredPosts = posts;
      } else {
        filteredPosts = posts.where((post) {
          return post['location'].toLowerCase().contains(query.toLowerCase());
        }).toList();
      }
    });
  }

  void toggleUploadPopup() {
    setState(() {
      isUploadPopupVisible = !isUploadPopupVisible;
    });
  }

  void toggleTripImagePopup() {
    setState(() {
      isTripImagePopupVisible = !isTripImagePopupVisible;
    });
  }

  Future<void> _pickImages(BuildContext context, String type) async {
    final FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.image,
      allowMultiple: true,
      onFileLoading: (file) {
        // Handle file loading progress here if needed
      },
    );

    if (result != null) {
      final List<PlatformFile> images = result.files;
      // Handle the selected images here
      // For example: images.forEach((image) => print(image.name));
    }
  }

  void _uploadPost() {
    // Implement the UploadPost function here
    // ...
    toggleUploadPopup();
  }

  void _uploadTripImage() {
    // Implement the TripImageUpload function here
    // ...
    toggleTripImagePopup();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: IconButton(
          icon: Icon(Icons.add_circle),
          onPressed: toggleUploadPopup,
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: SizedBox(
              width: 200,
              child: TextField(
                controller: _searchController, // Set the controller here
                onChanged: onSearchChanged,
                decoration: InputDecoration(
                  hintText: 'Search by location',
                  border: OutlineInputBorder(),
                  contentPadding: EdgeInsets.symmetric(
                      vertical: 6.0, horizontal: 10.0), // Adjust the padding
                  suffixIcon: IconButton(
                    icon: Icon(Icons.clear),
                    onPressed: () {
                      setState(() {
                        filterLocation = '';
                        filteredPosts = posts;
                        _searchController.clear(); // Clear the search text
                      });
                    },
                  ),
                ),
              ),
            ),
          ),
          IconButton(
            icon: Icon(Icons.filter_alt),
            onPressed: toggleFilterPopup,
          ),
        ],
      ),
      body: Column(
        children: [
          if (isFilterVisible)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15)),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      TextField(
                        onChanged: (value) {
                          setState(() {
                            filterLocation = value;
                          });
                        },
                        decoration: InputDecoration(
                          labelText: 'Location',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(height: 10),
                      TextField(
                        onChanged: (value) {
                          setState(() {
                            filterDuration = value;
                          });
                        },
                        decoration: InputDecoration(
                          labelText: 'Duration',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      SizedBox(height: 20),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          TextButton(
                            onPressed: () {
                              resetFilters();
                              toggleFilterPopup();
                            },
                            child: Text('Reset',
                                style: TextStyle(color: Colors.red)),
                          ),
                          TextButton(
                            onPressed: () {
                              applyFilters();
                              toggleFilterPopup();
                            },
                            child: Text('Apply',
                                style: TextStyle(color: Colors.blue)),
                          ),
                        ],
                      ),
                      TextButton(
                        onPressed: toggleFilterPopup,
                        child: Text('Close',
                            style: TextStyle(color: Colors.black)),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          if (isUploadPopupVisible)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15)),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          TextButton(
                            onPressed: toggleUploadPopup,
                            child: Text('Cancel',
                                style: TextStyle(color: Colors.black)),
                          ),
                          TextButton(
                            onPressed: _uploadPost,
                            child: Text('Upload',
                                style: TextStyle(color: Colors.blue)),
                          ),
                        ],
                      ),
                      SizedBox(height: 20),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          ElevatedButton(
                            onPressed: () {
                              setState(() {
                                isPostSelected = true;
                                isTripImageSelected = false;
                              });
                              _pickImages(context, 'post');
                            },
                            child: Text('Post'),
                          ),
                          ElevatedButton(
                            onPressed: () {
                              setState(() {
                                isPostSelected = false;
                                isTripImageSelected = true;
                              });
                              _pickImages(context, 'trip');
                            },
                            child: Text('Story'),
                          ),
                        ],
                      ),
                      if (isPostSelected)
                        Column(
                          children: [
                            SizedBox(height: 10),
                            // Implement the file upload box for post images here
                            ElevatedButton(
                              onPressed: () => _pickImages(context, 'post'),
                              child: Text('Select Images'),
                            ),
                            Text('Location'),
                            SizedBox(height: 10),
                            // Implement the location input box with suggestions here
                            TextField(
                              controller: visitingPlacesController,
                              decoration: InputDecoration(
                                labelText: 'Location',
                                border: OutlineInputBorder(),
                              ),
                            ),
                            Text('Location Description'),
                            SizedBox(height: 10),
                            // Implement the location description input box here
                            TextField(
                              decoration: InputDecoration(
                                labelText: 'Location Description',
                                border: OutlineInputBorder(),
                              ),
                            ),
                            Text('Trip Duration'),
                            SizedBox(height: 10),
                            // Implement the trip duration input box here
                            TextField(
                              decoration: InputDecoration(
                                labelText: 'Trip Duration',
                                border: OutlineInputBorder(),
                              ),
                            ),
                            Text('Visiting Places'),
                            SizedBox(height: 10),
                            // Implement the visiting places input box here
                            TextField(
                              controller: visitingPlacesController,
                              decoration: InputDecoration(
                                labelText: 'Visiting Places',
                                border: OutlineInputBorder(),
                              ),
                            ),
                          ],
                        ),
                      if (isTripImageSelected)
                        Column(
                          children: [
                            SizedBox(height: 10),
                            // Implement the file upload box for trip images here
                            ElevatedButton(
                              onPressed: () => _pickImages(context, 'trip'),
                              child: Text('Select Images'),
                            ),
                          ],
                        ),
                    ],
                  ),
                ),
              ),
            ),
          if (isTripImagePopupVisible)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15)),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          TextButton(
                            onPressed: toggleTripImagePopup,
                            child: Text('Cancel',
                                style: TextStyle(color: Colors.black)),
                          ),
                          TextButton(
                            onPressed: _uploadTripImage,
                            child: Text('Upload',
                                style: TextStyle(color: Colors.blue)),
                          ),
                        ],
                      ),
                      SizedBox(height: 20),
                      // Implement the file upload box for trip images here
                      ElevatedButton(
                        onPressed: () => _pickImages(context, 'trip'),
                        child: Text('Select Images'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          Expanded(
            child: ListView.builder(
              itemCount: filteredPosts.length,
              itemBuilder: (context, index) {
                final post = filteredPosts[index];
                return UserPost(
                  index: index,
                  postId: post['postId'], // Pass postId here
                  images: post['images'],
                  location: post['location'],
                  locationDescription: post['locationDescription'],
                  tripDuration: post['tripDuration'].toString(),
                  userImage: post['userImage'],
                  userName: post['userName'],
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class UserPost extends StatefulWidget {
  final int index;
  final String postId; // Add postId here
  final List<String> images;
  final String location;
  final String locationDescription;
  final String tripDuration;
  final String userImage;
  final String userName;

  UserPost({
    required this.index,
    required this.postId, // Accept postId in the constructor
    required this.images,
    required this.location,
    required this.locationDescription,
    required this.tripDuration,
    required this.userImage,
    required this.userName,
  });

  @override
  _UserPostState createState() => _UserPostState();
}

class _UserPostState extends State<UserPost> {
  late PageController _pageController;
  late int _currentPage;

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _currentPage = 0;
  }

  void _nextImage() {
    if (_currentPage < widget.images.length - 1) {
      _pageController.animateToPage(
        _currentPage + 1,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    }
  }

  void _previousImage() {
    if (_currentPage > 0) {
      _pageController.animateToPage(
        _currentPage - 1,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to the post details screen when the card is tapped
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PostDetailScreen(
              postId: widget.postId, // Pass postId
              username: widget.userName, // Pass userName
            ),
          ),
        );
      },
      child: Card(
        elevation: 5,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            children: [
              Row(
                children: [
                  GestureDetector(
                    onTap: () {
                      // Navigating to the ProfilePage with the username parameter
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => UsersProfilePage(
                              username: widget.userName), // Passing username
                        ),
                      );
                    },
                    child: CircleAvatar(
                      radius: 25,
                      backgroundImage: AssetImage(widget.userImage),
                    ),
                  ),
                  SizedBox(width: 10),
                  GestureDetector(
                    onTap: () {
                      // Navigating to the ProfilePage with the username parameter
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => UsersProfilePage(
                              username: widget.userName), // Passing username
                        ),
                      );
                    },
                    child: Text(
                      widget.userName,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 10),
              GestureDetector(
                onTap: _nextImage,
                child: Container(
                  height: 250,
                  child: Stack(
                    children: [
                      PageView.builder(
                        controller: _pageController,
                        itemCount: widget.images.length,
                        onPageChanged: (int page) {
                          setState(() {
                            _currentPage = page;
                          });
                        },
                        itemBuilder: (context, index) {
                          return ClipRRect(
                            borderRadius: BorderRadius.circular(15),
                            child: Image.asset(
                              widget.images[index],
                              fit: BoxFit.cover,
                              width: double.infinity,
                            ),
                          );
                        },
                      ),
                      Positioned(
                        left: 10,
                        top: 100,
                        child: IconButton(
                          icon: Icon(Icons.arrow_back_ios, color: Colors.white),
                          onPressed: _previousImage,
                        ),
                      ),
                      Positioned(
                        right: 10,
                        top: 100,
                        child: IconButton(
                          icon: Icon(Icons.arrow_forward_ios,
                              color: Colors.white),
                          onPressed: _nextImage,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  widget.location,
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  widget.locationDescription,
                  style: TextStyle(color: Colors.grey),
                ),
              ),
              // Reduced padding here to decrease the gap
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Text(
                  'Duration Plan : ${widget.tripDuration}',
                  style: TextStyle(color: Colors.grey),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
in this app bar add a post button in the left side and when i press that it will open a popup for post . here in the popup  have a post and Trip Image section in icon in top and below a container the element is based on the above buttom pressed . in defalut select post.


in the post there is a file uplaod box to uploadd the image only. where almost(maximum) 3 photos can uplaod(only user can select 3 images from gal;ary or it select 3 images uplaoded that will cancel if more is uplaoded) and below of the file upload there have a text filed to enter locationName , and below of that a a text area (muli line input)discription of that loaction and below the textfield of trip duration which take only number and below a text area to take visiting places,(here can you set  a feature taht when in that filed when user enter words and press enter key in phone keyboarddd , that save that words as a list fromat of each enter( like entering tags in youtube) . 



when user press the TripImages button, then it show only a image uplaod box to upload one image. 

in the below of that container (post and trip image) there show (in the bottom) there in the left side have a cancel button and right side hava upload button


if user press the upload button then it validdate the detail in above(check images , text , etc is non empty in the case of trip image the image is non empty) if there is a problem in tehre show warning and say to upload that also(image , text),. and in the case of post , the upload that call a function named postuplaod and pass the all user entered details and submited images(maximun 3) to that function, and that prints the user entered details and image name(the visiting place is print in the from of list) .
in the case of trip image when press the uploaddd there it check the image is uplaod on the file uplaod box , if that empty show warning , if that TripImageuplaod it call a function and pass the image to that function call and print the file name or anything







create a flutter gui with a button ,
when i press that button then show a 

in the popup there is a in top and two option , post and upload image.

in  below a container to show elemets based on the top options.

on  the below of the container there a two buttons , cancel(bottom left corner) and upload(bottomright corner). 


if the user press the post option in the top then 
in the container there shows
a file input cotiner box to upload loaction images. user can uplaod 3 maximum images(there support only images and if user upload more than 3 images , select first three). below a text field to enter loaction name, below of that a text input filed to input location discription and below a number input box to enter tripduration and below a text input for visitingplaces where a fixedd height tag contaner below of that . i wil tpe anything and press enter(in mobile keyboard or external) or (,)  that is show in that tags contaner. in each tags that have X remove that from container . there maximmum 10 tags can store. and when the user press the upload then validate (all is non-empty. if empty show warning to add that) and call a function named postUplaod with passing the all data . the tags is a sent like a list, and in that funtion where the all data is print and image is save on the file name loactionimages. if user press cancel the close the popup

if the user select the upload image., in top , then in that container there show only a images uplaod box contaner to uplaod images only and user can upload one image in there, then if the user press the uploadd that validate (the image is uplaoded) else show warning to uplaod. and call a function uploadImage andd pass the image to it 
in that function there is sgow the image name and sve that into tripImages folder. if user press the cancel then colse the pop up

here you can use file picker